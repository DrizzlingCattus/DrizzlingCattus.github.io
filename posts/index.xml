<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DrizzlingCattus papers</title>
    <link>https://drizzlingcattus.github.io/posts/</link>
    <description>Recent content in Posts on DrizzlingCattus papers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/natarajmb&#34;&gt;Nataraj Basappa&lt;/a&gt; 2018</copyright>
    <lastBuildDate>Sun, 01 Sep 2019 22:11:44 +0900</lastBuildDate>
    
	<atom:link href="https://drizzlingcattus.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Es6에서 import export를 통해 변수를 중복선언하게되면 어떻게 될까?</title>
      <link>https://drizzlingcattus.github.io/posts/browser-import-export-namespace-test/</link>
      <pubDate>Sun, 01 Sep 2019 22:11:44 +0900</pubDate>
      
      <guid>https://drizzlingcattus.github.io/posts/browser-import-export-namespace-test/</guid>
      <description>문득, javascript 코드를 작성하다가 es6 import/export가 동작하는 방식을 좀더 이해해야할 필요성을 느끼게 되었다. 그래서 간단한 테스트를 통해서 변수의 선언과 해당 선언이 중복되었을때 어떻게 처리하는가 알아보기로 했다.
const 중복선언 일단 처음은 예측이 가능한 경우를 테스트해보기로 했다. const 변수를 다른 JS파일에 같은 이름으로 선언을 해서 import 시킬때 어떻게 처리하는지 확인해보았다.
// index.js import {test} from &#39;./first.js&#39;; const test = &#39;index.js&#39;; console.log(test);  // first.js const test = &#39;first.js&#39;; export { test };  결과는 당연히 변수를 재선언했다고 Syntax Error를 발생시켰다.</description>
    </item>
    
    <item>
      <title>왜 Function.prototype.apply.apply를 사용하는가?</title>
      <link>https://drizzlingcattus.github.io/posts/function-apply-apply/</link>
      <pubDate>Wed, 28 Aug 2019 12:56:26 +0900</pubDate>
      
      <guid>https://drizzlingcattus.github.io/posts/function-apply-apply/</guid>
      <description>jasmine이라는 TDD 라이브러리의 구현을 살펴보는 도중에 약간 이해가 안되는 코드를 발견했다.
// … return Function.prototype.apply.apply(timer.setInterval, [global, arguments]); // … return Function.prototype.call.apply(timer.clearTimeout, [global, id]);  이런 코드가 있었는데, 처음에 드는 생각은 “Function.prototype.apply.apply(timer.setInterval, [global, arguments]) 는 timer.setInterval.apply(global, arguments) 랑 같은데 왜 굳이 저렇게 장황하게 써야하나?” 였다.
이유는 낮은 버젼의 IE와의 호환성 문제 때문이였다.
위의 timer.setInterval은 브라우져 구현의 timer객체 혹은 자체 구현한 객체를 지칭하는데, IE의 경우에 문제가 생겨서 위처럼 구현해둔것이다.
개인적으로 너무 끔찍하다.</description>
    </item>
    
    <item>
      <title>PS1 prompt setting 일대기</title>
      <link>https://drizzlingcattus.github.io/posts/ps1-prompt-setting%EC%9D%BC%EB%8C%80%EA%B8%B0/</link>
      <pubDate>Mon, 26 Aug 2019 21:18:13 +0900</pubDate>
      
      <guid>https://drizzlingcattus.github.io/posts/ps1-prompt-setting%EC%9D%BC%EB%8C%80%EA%B8%B0/</guid>
      <description>의식의 흐름을 따라 공부하다가 PS1으로 내 작업환경을 좀더 아름답게 만드려는 시도를 하게 되었다.
모든 문제는 나의 이 즉흥적인 공부가 항상 원인인것 같다.
이 녀석은 내가 쉘스크립트 지식이 모자란것에 더불어 요상한 버그까지 같이 곁들여져서 내 시간을 흡수하는 블랙홀이 되었다.
내 하루를 다 써서 결국 해결하긴했지만 아직도 분통이 터진다.
기회가 되면 쉘스크립트 래퍼런스를 정독해야겠다.
쉘스크립트 문자열에 대한 문법 쉘스크립트에서 문자열을 표현하면서 각기 다른 기능을 하는 3가지 문법이 존재한다.
 Double quote (“ ”) : 이 녀석은 문자열과 평가할 수 있는 값들(변수, 함수)를 같이 섞어서 사용할 수 있다.</description>
    </item>
    
  </channel>
</rss>